/* This file was automatically generated by Fuang.Cao, Do not modify */

#include "CavanMain.h"

extern "C" int do_cavan_abspath(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAbspath(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "abspath", do_cavan_abspath);
}

extern "C" int do_cavan_alarm(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAlarm(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "alarm", do_cavan_alarm);
}

extern "C" int do_cavan_alc5671_clock(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAlc5671Clock(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "alc5671_clock", do_cavan_alc5671_clock);
}

extern "C" int do_cavan_auto_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAutoDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "auto_dd", do_cavan_auto_dd);
}

extern "C" int do_cavan_auto_input(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAutoInput(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "auto_input", do_cavan_auto_input);
}

extern "C" int do_cavan_auto_mount(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeAutoMount(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "auto_mount", do_cavan_auto_mount);
}

extern "C" int do_cavan_battery(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBattery(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "battery", do_cavan_battery);
}

extern "C" int do_cavan_battery_level(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBatteryLevel(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "battery_level", do_cavan_battery_level);
}

extern "C" int do_cavan_bdata(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBdata(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bdata", do_cavan_bdata);
}

extern "C" int do_cavan_bkernel(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBkernel(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bkernel", do_cavan_bkernel);
}

extern "C" int do_cavan_bmp_view(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBmpView(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bmp_view", do_cavan_bmp_view);
}

extern "C" int do_cavan_bootimg(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBootimg(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bootimg", do_cavan_bootimg);
}

extern "C" int do_cavan_bramdisk(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBramdisk(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bramdisk", do_cavan_bramdisk);
}

extern "C" int do_cavan_brecovery(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBrecovery(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "brecovery", do_cavan_brecovery);
}

extern "C" int do_cavan_bsystem(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBsystem(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "bsystem", do_cavan_bsystem);
}

extern "C" int do_cavan_buboot(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeBuboot(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "buboot", do_cavan_buboot);
}

extern "C" int do_cavan_calculator(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeCalculator(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "calculator", do_cavan_calculator);
}

extern "C" int do_cavan_chroot(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeChroot(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "chroot", do_cavan_chroot);
}

extern "C" int do_cavan_chtty(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeChtty(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "chtty", do_cavan_chtty);
}

extern "C" int do_cavan_copy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeCopy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "copy", do_cavan_copy);
}

extern "C" int do_cavan_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "dd", do_cavan_dd);
}

extern "C" int do_cavan_df(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeDf(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "df", do_cavan_df);
}

extern "C" int do_cavan_display(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeDisplay(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "display", do_cavan_display);
}

extern "C" int do_cavan_dos2unix(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeDos2unix(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "dos2unix", do_cavan_dos2unix);
}

extern "C" int do_cavan_eavoo_sell_statistic(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeEavooSellStatistic(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "eavoo_sell_statistic", do_cavan_eavoo_sell_statistic);
}

extern "C" int do_cavan_ecc(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeEcc(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ecc", do_cavan_ecc);
}

extern "C" int do_cavan_event_repeater(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeEventRepeater(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "event_repeater", do_cavan_event_repeater);
}

extern "C" int do_cavan_ext2(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeExt2(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ext2", do_cavan_ext2);
}

extern "C" int do_cavan_fb_capture(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFbCapture(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "fb_capture", do_cavan_fb_capture);
}

extern "C" int do_cavan_fdisk(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFdisk(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "fdisk", do_cavan_fdisk);
}

extern "C" int do_cavan_file_crc32(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFileCrc32(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "file_crc32", do_cavan_file_crc32);
}

extern "C" int do_cavan_file_join(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFileJoin(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "file_join", do_cavan_file_join);
}

extern "C" int do_cavan_file_loop(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFileLoop(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "file_loop", do_cavan_file_loop);
}

extern "C" int do_cavan_file_split(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFileSplit(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "file_split", do_cavan_file_split);
}

extern "C" int do_cavan_ftp(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFtp(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ftp", do_cavan_ftp);
}

extern "C" int do_cavan_ftp_server(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeFtpServer(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ftp_server", do_cavan_ftp_server);
}

extern "C" int do_cavan_git_daemon(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeGitDaemon(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "git_daemon", do_cavan_git_daemon);
}

extern "C" int do_cavan_heart_rate(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeHeartRate(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "heart_rate", do_cavan_heart_rate);
}

extern "C" int do_cavan_i2c(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeI2c(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "i2c", do_cavan_i2c);
}

extern "C" int do_cavan_image_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeImageDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "image_dd", do_cavan_image_dd);
}

extern "C" int do_cavan_inotify(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeInotify(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "inotify", do_cavan_inotify);
}

extern "C" int do_cavan_input(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeInput(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "input", do_cavan_input);
}

extern "C" int do_cavan_jw650_lcd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeJw650Lcd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "jw650_lcd", do_cavan_jw650_lcd);
}

extern "C" int do_cavan_jwp_udp(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeJwpUdp(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "jwp_udp", do_cavan_jwp_udp);
}

extern "C" int do_cavan_lm49350_clock(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeLm49350Clock(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "lm49350_clock", do_cavan_lm49350_clock);
}

extern "C" int do_cavan_loop_run(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeLoopRun(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "loop_run", do_cavan_loop_run);
}

extern "C" int do_cavan_md5sum(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMd5sum(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "md5sum", do_cavan_md5sum);
}

extern "C" int do_cavan_mkdir(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMkdir(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mkdir", do_cavan_mkdir);
}

extern "C" int do_cavan_mknp(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMknp(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mknp", do_cavan_mknp);
}

extern "C" int do_cavan_mksdcard(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMksdcard(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mksdcard", do_cavan_mksdcard);
}

extern "C" int do_cavan_modem_upgrade(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeModemUpgrade(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "modem_upgrade", do_cavan_modem_upgrade);
}

extern "C" int do_cavan_mount(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMount(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mount", do_cavan_mount);
}

extern "C" int do_cavan_move(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMove(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "move", do_cavan_move);
}

extern "C" int do_cavan_mtd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMtd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mtd", do_cavan_mtd);
}

extern "C" int do_cavan_net_discovery(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeNetDiscovery(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "net_discovery", do_cavan_net_discovery);
}

extern "C" int do_cavan_net_monitor(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeNetMonitor(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "net_monitor", do_cavan_net_monitor);
}

extern "C" int do_cavan_part_probe(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePartProbe(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "part_probe", do_cavan_part_probe);
}

extern "C" int do_cavan_part_show(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePartShow(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "part_show", do_cavan_part_show);
}

extern "C" int do_cavan_part_table(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePartTable(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "part_table", do_cavan_part_table);
}

extern "C" int do_cavan_ping(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePing(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ping", do_cavan_ping);
}

extern "C" int do_cavan_poll_event(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePollEvent(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "poll_event", do_cavan_poll_event);
}

extern "C" int do_cavan_poll_input(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativePollInput(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "poll_input", do_cavan_poll_input);
}

extern "C" int do_cavan_ramdisk(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeRamdisk(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ramdisk", do_cavan_ramdisk);
}

extern "C" int do_cavan_remove(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeRemove(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "remove", do_cavan_remove);
}

extern "C" int do_cavan_resize(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeResize(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "resize", do_cavan_resize);
}

extern "C" int do_cavan_rle(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeRle(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "rle", do_cavan_rle);
}

extern "C" int do_cavan_screen_mirror(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeScreenMirror(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "screen_mirror", do_cavan_screen_mirror);
}

extern "C" int do_cavan_service(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeService(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "service", do_cavan_service);
}

extern "C" int do_cavan_sha1sum(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSha1sum(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "sha1sum", do_cavan_sha1sum);
}

extern "C" int do_cavan_show_file(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeShowFile(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "show_file", do_cavan_show_file);
}

extern "C" int do_cavan_shrink(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeShrink(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "shrink", do_cavan_shrink);
}

extern "C" int do_cavan_sprd_at(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSprdAt(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "sprd_at", do_cavan_sprd_at);
}

extern "C" int do_cavan_sprd_write_imei(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSprdWriteImei(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "sprd_write_imei", do_cavan_sprd_write_imei);
}

extern "C" int do_cavan_ssh(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSsh(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ssh", do_cavan_ssh);
}

extern "C" int do_cavan_ssh_copy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSshCopy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ssh_copy", do_cavan_ssh_copy);
}

extern "C" int do_cavan_sshd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSshd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "sshd", do_cavan_sshd);
}

extern "C" int do_cavan_ssh_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSshDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "ssh_dd", do_cavan_ssh_dd);
}

extern "C" int do_cavan_su(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSu(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "su", do_cavan_su);
}

extern "C" int do_cavan_sudo(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSudo(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "sudo", do_cavan_sudo);
}

extern "C" int do_cavan_super_upgrade(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSuperUpgrade(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "super_upgrade", do_cavan_super_upgrade);
}

extern "C" int do_cavan_swan_check(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanCheck(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_check", do_cavan_swan_check);
}

extern "C" int do_cavan_swan_emmc(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanEmmc(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_emmc", do_cavan_swan_emmc);
}

extern "C" int do_cavan_swan_fac(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanFac(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_fac", do_cavan_swan_fac);
}

extern "C" int do_cavan_swan_ipu(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanIpu(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_ipu", do_cavan_swan_ipu);
}

extern "C" int do_cavan_swan_mac(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanMac(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_mac", do_cavan_swan_mac);
}

extern "C" int do_cavan_swan_md5(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanMd5(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_md5", do_cavan_swan_md5);
}

extern "C" int do_cavan_swan_mkfs(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanMkfs(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_mkfs", do_cavan_swan_mkfs);
}

extern "C" int do_cavan_swan_sfdisk(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanSfdisk(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_sfdisk", do_cavan_swan_sfdisk);
}

extern "C" int do_cavan_swan_ts(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanTs(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_ts", do_cavan_swan_ts);
}

extern "C" int do_cavan_swan_upgrade(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanUpgrade(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_upgrade", do_cavan_swan_upgrade);
}

extern "C" int do_cavan_swan_vk(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanVk(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_vk", do_cavan_swan_vk);
}

extern "C" int do_cavan_swan_vn(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSwanVn(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "swan_vn", do_cavan_swan_vn);
}

extern "C" int do_cavan_system_init(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeSystemInit(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "system_init", do_cavan_system_init);
}

extern "C" int do_cavan_tcp_copy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpCopy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_copy", do_cavan_tcp_copy);
}

extern "C" int do_cavan_tcp_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_dd", do_cavan_tcp_dd);
}

extern "C" int do_cavan_tcp_dd_server(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpDdServer(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_dd_server", do_cavan_tcp_dd_server);
}

extern "C" int do_cavan_tcp_exec(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpExec(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_exec", do_cavan_tcp_exec);
}

extern "C" int do_cavan_tcp_keypad(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpKeypad(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_keypad", do_cavan_tcp_keypad);
}

extern "C" int do_cavan_tcp_proxy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTcpProxy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tcp_proxy", do_cavan_tcp_proxy);
}

extern "C" int do_cavan_tee(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTee(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tee", do_cavan_tee);
}

extern "C" int do_cavan_textlen(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTextlen(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "textlen", do_cavan_textlen);
}

extern "C" int do_cavan_tftp_auto_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTftpAutoDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tftp_auto_dd", do_cavan_tftp_auto_dd);
}

extern "C" int do_cavan_tftp_command(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTftpCommand(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tftp_command", do_cavan_tftp_command);
}

extern "C" int do_cavan_tftp_copy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTftpCopy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tftp_copy", do_cavan_tftp_copy);
}

extern "C" int do_cavan_tftp_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTftpDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tftp_dd", do_cavan_tftp_dd);
}

extern "C" int do_cavan_tftp_dd_server(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTftpDdServer(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tftp_dd_server", do_cavan_tftp_dd_server);
}

extern "C" int do_cavan_touch(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTouch(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "touch", do_cavan_touch);
}

extern "C" int do_cavan_tty_mode(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeTtyMode(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "tty_mode", do_cavan_tty_mode);
}

extern "C" int do_cavan_umount(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeUmount(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "umount", do_cavan_umount);
}

extern "C" int do_cavan_usb(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeUsb(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "usb", do_cavan_usb);
}

extern "C" int do_cavan_usb_copy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeUsbCopy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "usb_copy", do_cavan_usb_copy);
}

extern "C" int do_cavan_usb_dd(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeUsbDd(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "usb_dd", do_cavan_usb_dd);
}

extern "C" int do_cavan_usb_dd_server(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeUsbDdServer(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "usb_dd_server", do_cavan_usb_dd_server);
}

extern "C" int do_cavan_vfat(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeVfat(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "vfat", do_cavan_vfat);
}

extern "C" int do_cavan_web_proxy(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeWebProxy(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "web_proxy", do_cavan_web_proxy);
}

extern "C" int do_cavan_mkfs(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeMkfs(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "mkfs", do_cavan_mkfs);
}

extern "C" int do_cavan_calculator_cpp(int argc, char *argv[]);

JNIEXPORT jint Java_com_cavan_cavanmain_CavanNative_nativeCalculatorCpp(JNIEnv *env, jobjectArray args)
{
	return CavanMainExecute(env, args, "calculator_cpp", do_cavan_calculator_cpp);
}
