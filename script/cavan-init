#!/bin/bash

FILE_FSTAB="/etc/fstab"
FILE_MOUNTS="/proc/mounts"
FILE_PARTITIONS="/proc/partitions"
FILE_BASHRC="/etc/bash.bashrc"
FILE_VIMRC="/etc/vim/vimrc"
FILE_GROUP="/etc/group"
FILE_EXPORTS="/etc/exports"
FILE_SAMBA_CONFIG="/etc/samba/smb.conf"
FILE_CAVAN_SERVICE="/etc/init.d/cavan"
FILE_GIT_DAEMON_RUN="/etc/sv/git-daemon/run"
FILE_GRUB_LINUX="/etc/grub.d/10_linux"
FILE_APP_FEILED="/tmp/cavan-app-failed.txt"

CAVAN_HOME="/cavan"

CPAN_PATH="/mnt/sda1"
DPAN_PATH="/mnt/sda5"
EPAN_PATH="/mnt/sda6"
FPAN_PATH="/mnt/sda7"
GPAN_PATH="/mnt/sda8"
UBUNTU_PATH="${DPAN_PATH}/ubuntu"
UBUNTU_HOME="${UBUNTU_PATH}/home"
FILE_SWAP_IMG="${UBUNTU_PATH}/swap.img"
FILE_VIMRC_VIM="${CAVAN_HOME}/script/vim/vimrc.vim"

NFS_RW_CONFIG="*(rw,sync,no_subtree_check)"
NFS_RO_CONFIG="*(ro,sync,no_subtree_check)"

function file_asb_directory()
{
	cd $(dirname $1) && pwd
}

CMD_ABS_DIR="$(file_asb_directory $0)"
CMD_ABS_PATH="${CMD_ABS_DIR}/$(basename $0)"
CORE_PATH="${CMD_ABS_DIR}/core"
FILE_APP_CONFIG="${CORE_PATH}/applications.cfg"

source /etc/lsb-release
source ${CORE_PATH}/file.sh
source ${CORE_PATH}/device.sh
source ${CORE_PATH}/stdio.sh

LOCAL_UBUNTU="${UBUNTU_PATH}-${DISTRIB_RELEASE}"

function mount_disk()
{
	local mount_point disk line

	cd /dev || return 1

	if [ "$1" ]
	then
		disk="$1"
	else
		disk="sda"
	fi

	while read line
	do
		echo ${line} | grep "${disk}[0-9]\+" || continue
		set ${line}
		[ "$3" -gt "10" ] || continue

		mount_point="/mnt/$4"
		umount_directory ${mount_point}
		mkdir ${mount_point} -pv
		umount $4
		mount $4 ${mount_point} ||
		{
			rmdir ${mount_point}
			continue
		}

		grep "${mount_point}" ${FILE_FSTAB} ||
		{
			echo "/dev/$4 ${mount_point} auto errors=remount-ro 0 0" >> ${FILE_FSTAB}
		}
	done < ${FILE_PARTITIONS}
}

function swap_init()
{
	[ -f "${FILE_SWAP_IMG}" ] ||
	{
		dd if=/dev/zero of=${FILE_SWAP_IMG} bs=3M count=1024 || return 1
		mkswap -L CFA8888 ${FILE_SWAP_IMG} || return 1
	}

	swapon ${FILE_SWAP_IMG} || return 1
	cat ${FILE_FSTAB} | grep "${FILE_SWAP_IMG}" && return 0
	echo "${FILE_SWAP_IMG} swap swap default 0 0" >> ${FILE_FSTAB}
}

function create_mount_points()
{
	mkdir /mnt -pv
	cd /mnt || return 1

	for index in 1 2 3 4 5 6 7 8
	do
		mkdir upan${index} -pv
		mkdir img${index} -pv
		mkdir net${index} -pv
	done
}

function create_symlinks()
{
	cavan-symlink ${CPAN_PATH} /cpan || return 1
	cavan-symlink ${DPAN_PATH} /dpan || return 1
	cavan-symlink ${EPAN_PATH} /epan || return 1
	cavan-symlink ${EPAN_PATH}/source /source || return 1
	cavan-symlink ${FPAN_PATH} /fpan || return 1
	cavan-symlink ${GPAN_PATH} /gpan || return 1
	cavan-symlink ${UBUNTU_PATH} /ubuntu || return 1

	for dir in cavan work git svn book project tools app
	do
		cavan-symlink ${UBUNTU_PATH}/${dir} /${dir} || return 1
	done
}

function config_bashrc()
{
	local bashrc bashrcs

	bashrcs="$(find /home -name ".bashrc")"

	[ -z "${bashrcs}" ] && return 0

	for bashrc in ${bashrcs}
	do
		cp ${bashrc} ${FILE_BASHRC} -av
		mv ${bashrc} ${bashrc}.bak
	done

	mv /root/.bashrc /root/.bashrc.bak

	sed -i ${FILE_BASHRC} \
		-e 's,^\s*#\s*\(force_color_prompt=yes\),\1,g'

	cat >> ${FILE_BASHRC} << EOF

# Following is Cavan's configs
CAVAN_HOME="/cavan"
TOOLS_HOME="/tools"
SSH_USER="${SSH_USER-caofuang}"
SMB_SERVER_IP="${SMB_SERVER_IP-10.1.1.241}"
SMB_USER="${SMB_USER-caofuang}"
SMB_PASSWORD="${SMB_PASSWORD-CFA8888}"
SMB_ENTRY="${SMB_ENTRY-huaserver2_caofuang}"
JDK_VERSION="${JDK_VERSION-1.6.0_33}"
SDK_NAME="android-sdk-linux"
CAVAN_SERVER_IP="\${CAVAN_SERVER_IP-10.1.1.241}"
CAVAN_SERVER_PORT="\${CAVAN_SERVER_PORT-8888}"
PROJECT_HOME="${PROJECT_HOME}"
PRODUCT_HOME="${PRODUCT_HOME-/project/product}"
REMOTE_PROJECT_HOME="${REMOTE_PROJECT_HOME-/home/user}"
REMOTE_PRODUCT_HOME="${REMOTE_PRODUCT_HOME-/home/user/product}"

source \${CAVAN_HOME}/script/core/bashrc.sh
EOF
}

function config_vimrc()
{
	cat >> ${FILE_VIMRC} << EOF

" Following is Cavan's configs
if filereadable("${FILE_VIMRC_VIM}")
  source ${FILE_VIMRC_VIM}
endif
EOF
}

function config_group()
{
	sed 's/\(.*:\)\s*$/\1cavan/g' ${FILE_GROUP} -i
}

function config_nfs()
{
	for exp in /
	do
		echo "${exp} ${NFS_RO_CONFIG}"
	done >> ${FILE_EXPORTS}

	for exp in /tmp /temp /cavan /git /ubuntu /book /cpan /dpan /epan /fpan /gpan
	do
		echo "${exp} ${NFS_RW_CONFIG}"
	done >> ${FILE_EXPORTS}

	service nfs-kernel-server restart
}

function config_samba()
{
	cat >> ${FILE_SAMBA_CONFIG} << EOF
[rootfs]
   comment = ${DISTRIB_ID}-${DISTRIB_RELEASE}
   browseable = yes
   path = /
   guest ok = yes
   read only = no
   create mask = 0777
   dos charset = cp936
   unix charset = gb2312
EOF

	service smbd restart
}

function config_single_home()
{
	cd $1 || return 1

	for dir in Desktop Documents Downloads Music Pictures .stardict .VirtualBox VirtualBox\ VMs
	do
		cavan-symlink "${UBUNTU_HOME}/${dir}" "${dir}" || return 1
	done
}

function config_home()
{
	for home in /root /home/*
	do
		config_single_home ${home} || return 1
	done
}

function config_aptget()
{
	local var_path etc_path

	LOCAL_UBUNTU="${UBUNTU_PATH}/${DISTRIB_RELEASE}"
	var_path="${LOCAL_UBUNTU}/var"
	etc_path="${LOCAL_UBUNTU}/etc"

	cavan-symlink ${etc_path}/apt /etc/apt || return 1
	cavan-symlink ${var_path}/cache/apt /var/cache/apt || return 1
}

function config_git()
{
	local CMD_GIT_CONFIG="git config --global"

	${CMD_GIT_CONFIG} user.name Fuang.Cao || return 1
	${CMD_GIT_CONFIG} user.email cavan.cfa@gmail.com || return 1
	${CMD_GIT_CONFIG} core.editor vim || return 1
	${CMD_GIT_CONFIG} push.default matching || return 1

	for cmd in branch  interactive ui diff grep status
	do
		${CMD_GIT_CONFIG} color.${cmd} auto || return 1
	done

	for home in /home/*
	do
		local user="$(basename ${home})"

		cp /root/.gitconfig ${home}/.gitconfig -av || return 1
		chown ${user}:${user} ${home}/.gitconfig -v
	done

	cat > ${FILE_GIT_DAEMON_RUN} << EOF
#!/bin/sh

exec 2>&1
echo 'git-daemon starting.'
exec chpst -ugitdaemon \
  "$(git --exec-path)"/git-daemon --verbose --export-all --enable=receive-pack --enable=upload-pack --enable=upload-archive --base-path=/git
EOF
}

function install_applications()
{
	dpkg --configure -a || return 1
	apt-get update --fix-missing || return 1

	: > ${FILE_APP_FEILED}

	while read line
	do
		for app in ${line}
		do
			case "${app}" in
				*\#*)
					echo "skip ${app}"
					break
					;;
				*)
					pr_title "Install application ${app}"
					apt-get install -y ${app} ||
					{
						pr_red_info "Install application '${app}' failed"
						echo ${app} >> ${FILE_APP_FEILED}
					}
					;;
			esac
		done
	done < ${FILE_APP_CONFIG}

	mkdir -pv /etc/cavan || return 1
	cp ${FILE_APP_FEILED} /etc/cavan -av || return 1
}

function install_debin_packages()
{
	for pkg in ${LOCAL_UBUNTU}/debs/*.deb
	do
		pr_title "Install debin package ${pkg}"
		dpkg -i ${pkg} || return 0
	done
}

function config_stardict()
{
	cd /usr/share/stardict/dic || return 1

	for dic in ${UBUNTU_PATH}/app/stardict/*.tar.*
	do
		[ -f "${dic}" ] || continue
		pr_title "Install stardict ${dic}"
		tar -xf ${dic} || return 1
	done
}

function config_service()
{
	cat > ${FILE_CAVAN_SERVICE} << EOF
#!/bin/sh

[ "\$(id -u)" = "0" ] ||
{
	echo "Only super user can do this"
	exit 1
}

CAVAN_OUT_DEBUG="${CAVAN_HOME}/out/host/debug"
CMD_TCP_DD_SERVER="\${CAVAN_OUT_DEBUG}/cavan-tcp_dd_server"
CMD_TFTP_DD_SERVER="\${CAVAN_OUT_DEBUG}/cavan-tftp_dd_server"
CMD_START_STOP_DAEMON="start-stop-daemon --quiet --oknodo"
CAVAN_SERVER_LIST="\${CMD_TCP_DD_SERVER} \${CMD_TFTP_DD_SERVER}"
CAVAN_SERVER_OPTION="--daemon"

case "\$1" in
	start)
		for cmd in \${CAVAN_SERVER_LIST}
		do
			\${CMD_START_STOP_DAEMON} --start --exec \${cmd} -- \${CAVAN_SERVER_OPTION}
		done
		;;
	stop)
		for cmd in \${CAVAN_SERVER_LIST}
		do
			\${CMD_START_STOP_DAEMON} --stop --exec \${cmd}
		done
		;;
	restart)
		for cmd in \${CAVAN_SERVER_LIST}
		do
			\${CMD_START_STOP_DAEMON} --stop --exec \${cmd}
		done

		for cmd in \${CAVAN_SERVER_LIST}
		do
			\${CMD_START_STOP_DAEMON} --start --exec \${cmd} -- \${CAVAN_SERVER_OPTION}
		done
		;;
esac
EOF
	chmod 555 ${FILE_CAVAN_SERVICE} || return 1

	return 0
}

function config_grub()
{
	sed 	-e 's#^\(\s*linux.*\s\+root=\).*$#\1${GRUB_DEVICE} vga=0x318#g' \
			-e 's/^\s*printf.*\${prepare_\w*_cache}/# &/g' \
			-i ${FILE_GRUB_LINUX} || return 1
	update-grub2 || return 1

	return 0
}

function config_others()
{
	mkdir /temp -pv || return 1

	return 0
}

pr_title "${DISTRIB_ID}-${DISTRIB_RELEASE} (${DISTRIB_CODENAME})"

[ "$(id -u)" = "0" ] ||
{
	pr_red_info "Only root user can run ${CMD_ABS_PATH}"

	exit 1
}

for func in mount_disk create_mount_points create_symlinks config_bashrc \
	swap_init config_aptget install_applications install_debin_packages \
	config_nfs config_samba config_home config_git config_stardict \
	config_vimrc config_group config_service config_grub config_others
do
	if cavan-has_mark ${func}
	then
		pr_green_info "${func} is already completed"
	else
		pr_title "Start ${func}"
		if ${func}
		then
			cavan-create_mark ${func}
			pr_green_info "${func} successfull"
		else
			pr_red_info "${func} failed"
			exit 1
		fi
	fi
done
