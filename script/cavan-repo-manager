#!/bin/sh

"""exec" python -E $0 $@
#"""

import sys, os, os.path, time
from xml.dom.minidom import parse
from getopt import getopt

def pr_red_info(message):
	print "\033[31m%s\033[0m" % message

def pr_green_info(message):
	print "\033[32m%s\033[0m" % message

def pr_bold_info(message):
	print "\033[1m%s\033[0m" % message

class RepoManager:
	def __init__(self, repo_root = None):
		if repo_root == None:
			self.repo_root = os.path.abspath("work")
		else:
			self.repo_root = os.path.abspath(repo_root)
		self.repo_directory = os.path.join(self.repo_root, ".repo")

	def mkdir_perents(self, pathname):
		if os.path.isdir(pathname):
			return 0

		if os.path.exists(pathname):
			os.remove(pathname)

		if self.mkdir_perents(os.path.dirname(pathname)) < 0:
			pr_red_info("%s' create perent directory failed!" % pathname)
			return -1

		os.mkdir(pathname)
		return 0

	def show_usage():
		pr_bold_info("Usage: %s [options] output" % os.path.basename(sys.argv[0]))

	def git_clone(self, url, branch, output, options = ""):
		if os.path.isdir(os.path.join(output, ".git")):
			command = "git pull %s && git checkout %s" % (url, branch)
		elif self.mkdir_perents(output) < 0:
			pr_red_info("create directory %s failed!" % output)
			return -1
		else:
			command = "rm * -rfv && git clone %s -b %s %s ." % (options, branch, url)

		pr_bold_info(command)

		os.chdir(output)

		if os.system(command) != 0:
			return -1

		return 0

	def clone_manifest(self, url, branch, pathname = None):
		if pathname == None:
			pathname = os.path.join(self.repo_directory, "manifest")

		if self.git_clone(url, branch, pathname) < 0:
			return -1

		pathname = os.path.join(self.repo_directory, "manifest.xml")
		if os.path.exists(pathname):
			os.remove(pathname)
		os.symlink("manifest/default.xml", pathname)
		return 0

	def git_checkout_file(self, output, branch, filename):
		os.chdir(output)
		fp = os.popen("git status -b -s --porcelain | grep --color=never \"%s\"" % filename)
		while True:
			line = fp.readline()[3:].strip()
			if not line:
				break
			command = "git checkout %s %s" % (branch, line)
			print command
			if os.system(command) != 0:
				pr_red_info("git checkout file %s failed!" % line)
				fp.close()
				return -1
		fp.close()
		return 0

	def git_checkout_branch(self, repo_path, branch, remote):
		if repo_path:
			os.chdir(repo_path)
		if os.system("git branch | grep %s" % branch) != 0:
			command = "git checkout %s/%s -b %s" % (remote, branch, branch)
		else:
			command = "git checkout %s" % branch
		pr_bold_info(command)
		if os.system(command) != 0:
			pr_red_info("execute command `%s' failed" % command)
			return -1
		return 0

	def parse_xml(self, manifest_xml):
		if manifest_xml == None or os.path.exists(manifest):
			manifest_xml == None
			for path in ["manifest.xml", "manifest/default.xml"]:
				abspath = os.path.join(self.repo_directory, path)
				print "abspath = " + abspath
				if os.path.exists(abspath):
					manifest_xml = abspath
					break

		if manifest_xml == None:
			pr_red_info("No manifest xml found!")
			return -1

		self.manifest_dom = parse(manifest_xml)
		if self.manifest_dom ==  None:
			return -1

		self.tag_manifet = self.manifest_dom.getElementsByTagName("manifest").item(0)
		if self.tag_manifet == None:
			pr_red_info("No manifet tag found")
			return -1

		self.tag_remote = self.tag_manifet.getElementsByTagName("remote").item(0)
		if self.tag_remote == None:
			pr_red_info("No remote tag found")

		self.tag_default = self.tag_manifet.getElementsByTagName("default").item(0)
		if self.tag_default == None:
			pr_red_info("No default tag found")
			return -1

		self.remote_url = self.tag_remote.getAttribute("fetch")
		self.remote_name = self.tag_remote.getAttribute("name")
		self.git_branch = self.tag_default.getAttribute("revision")

		pr_bold_info("remote_url = " + self.remote_url)
		pr_bold_info("remote_name = " + self.remote_name);
		pr_bold_info("git_branch = " + self.git_branch)

		return 0

	def repo_command(self, command):
		if self.parse_xml(None) < 0:
			return -1

		for project in self.tag_manifet.getElementsByTagName("project"):
			path = project.getAttribute("path")
			name = project.getAttribute("name")
			command_last = command.replace("<path>", path).replace("<name>", name)
			abspath = os.path.join(self.repo_root, path)
			pr_bold_info("%s <= `%s'" % (path, command_last))
			if self.mkdir_perents(abspath) < 0:
				pr_red_info("create directory %s failed!" % abspath)
				return -1

			os.chdir(abspath)
			if os.system(command_last) != 0:
				pr_red_info("execute command %s failed!" % command_last)
				return -1
		return 0

	def repo_init(self, manifest_url, manifest_branch):
		if self.clone_manifest(manifest_url, manifest_branch) < 0:
			pr_red_info("clone manifest failed!")
			return -1

		if self.parse_xml(None) < 0:
			pr_red_info("patse manifest xml failed!")
			return -1

		for project in self.tag_manifet.getElementsByTagName("project"):
			path = project.getAttribute("path")
			name = project.getAttribute("name")
			url = os.path.join(self.remote_url, name) + ".git"
			output = os.path.join(self.repo_root, path)
			pr_bold_info("clone `%s'" % url)
			if self.git_clone(url, self.git_branch, output, "-n") < 0:
					pr_red_info("git clone %s failed!" % name)
					return -1

			if os.system("rm %s/* -rfv" % output) != 0:
				return -1

			if self.git_checkout_file(output, self.git_branch, ".gitignore") < 0:
				return -1
		return 0

	def decom_idh_package(self, idh_path, output):
		if os.system("rm %s -rfv" % output) != 0:
			pr_red_info("remove %s failed" % output)
			return -1

		if self.mkdir_perents(output) != 0:
			pr_red_info("create directory %s failed" % output)
			return -1

		os.chdir(output)

		if os.system("rar x \"%s\"" % idh_path) != 0:
			pr_red_info("decompress idh rar package failed!")
			return -1

		fp = os.popen("find -name *.tgz")
		while True:
			line = fp.readline().strip()
			if not line:
				break
			pr_bold_info("decompress `%s'" % line)
			if os.system("tar -xvf \"%s\"" % line) != 0:
				pr_red_info("decompress `%s' failed" % line)
				fp.close()
				return -1
		fp.close()

		for fn in ["csr", "inno"]:
			if not os.path.isdir(fn):
				continue
			command = "cp %s/* idh.code -av" % fn
			pr_bold_info(command)
			if os.system(command) != 0:
				pr_red_info("copy `%s' failed" % fn)
				return -1
		return 0

	def repo_merge(self, manifest_url, their_code, out_branch, their_branch):
		# if self.repo_init(manifest_url, their_branch) < 0:
		#	pr_red_info("init repo failed!")
		#	return -1
		self.parse_xml(None)

		if not os.path.isdir(their_code):
			tmp_idh_path = os.path.join(self.repo_root, "idh")
			#if self.decom_idh_package(their_code, tmp_idh_path) < 0:
			#	return -1
			their_code = os.path.join(tmp_idh_path, "idh.code")

		if os.system("mv %s/* %s -nv" % (their_code, self.repo_root)) != 0:
			pr_red_info("copy code failed")
			return -1

		date = time.localtime(time.time())
		message = "Merge code at %d.%02d.%d %d:%02d:%02d" % (date[0], date[1], date[2], date[3], date[4], date[5])

		for project in self.tag_manifet.getElementsByTagName("project"):
			path = project.getAttribute("path")
			abspath = os.path.join(self.repo_root, path)
			os.chdir(abspath)
			os.system("git add -f . && git commit -asm \"%s\"" % message)
			if self.git_checkout_branch(abspath, out_branch, "origin") != 0:
				pr_red_info("merge code failed!")
				return -1
		return 0

if __name__ == "__main__":
	repo = RepoManager(None)
	repo.repo_merge("git@192.168.6.40:T700/manifest.git", "/home/user/cavan/8810 W12.20 P5201262614512638foreavoo.rar", "eavoo_2.3.5", "idh_1153")
