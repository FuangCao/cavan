#!/bin/sh

"""exec" python -E $0 $@
#"""

import sys, os, time
from sys import argv

def pr_red_info(message):
	print "\033[31m%s\033[0m" % message

def pr_green_info(message):
	print "\033[32m%s\033[0m" % message

def pr_bold_info(message):
	print "\033[1m%s\033[0m" % message

class SvnRreoManager:
	def __init__(self, repo_root = "."):
		self.repo_root = os.path.abspath(repo_root)
		if os.path.isdir(os.path.join(repo_root, ".svn")):
			self.url = self.svn_repo_get_url()
		else:
			self.url = None

	def svn_repo_get_url(self):
		lines = self.svn_repo_popen("cd %s && svn info | grep ^URL:.*" % self.repo_root);
		if lines == None or len(lines) < 1:
			return None
		return lines[0][4:].strip()

	def svn_repo_system(self, command):
		pr_bold_info(command)
		if os.system(command) == 0:
			return 0
		return -1

	def svn_repo_popen(self, command):
		pr_bold_info("[popen] " + command)
		fp = os.popen(command)
		if fp == None:
			return []
		lines = fp.readlines()
		fp.close()
		return lines

	def svn_repo_update_single(self, pathname):
		if pathname.endswith("/"):
			if self.svn_repo_system("cd %s && git diff > %s && git reset --hard" % (pathname, self.diffpath)) < 0:
				return -1
			dirname = os.path.join(pathname, ".git")
			for fn in os.listdir(dirname):
				if not fn.endswith(".diff"):
					continue
				fn = os.path.join(dirname, fn)
				st = os.stat(fn)
				if st.st_size == 0:
					print "Remove empty file `%s'" % fn;
					os.remove(fn)
			return self.svn_repo_system("cd %s && git svn rebase" % pathname)
		else:
			return self.svn_repo_system("svn update --force " + pathname)

	def svn_repo_update(self):
		date = time.localtime(time.time())
		self.diffpath = ".git/%d%02d%d%d%02d%02d.diff" % (date[0], date[1], date[2], date[3], date[4], date[5])
		if self.url == None:
			pr_red_info("Please give the url of svn")
			return -1
		for fn in self.svn_repo_popen("svn list"):
			if self.svn_repo_update_single(fn.strip()) < 0:
				return -1
		return 0

	def svn_repo_clone_single(self, pathname):
		if pathname.endswith("/"):
			if not os.path.isdir(pathname):
				if os.path.exists(pathname):
					os.remove(pathname)
				url = os.path.join(self.url, pathname)
				if self.svn_repo_system("git svn init %s %s" % (url, pathname)) != 0:
					return -1
			if self.svn_repo_system("cd %s && git config pack.windowMemory 20m && git svn fetch && git svn rebase" % pathname) != 0:
				return -1
			self.svn_repo_system("cd %s && git checkout -b svn-master remotes/git-svn" % pathname)
			return 0
		else:
			return self.svn_repo_system("svn update --force " + pathname)

	def svn_repo_clone(self, argv):
		if self.url == None:
			if len(argv) < 1:
				pr_red_info("Please give the url of svn")
				return -1
			self.url = argv[0]
			if os.path.exists(".svn"):
				os.path.remove(".svn")
			if self.svn_repo_system("svn checkout --depth=empty %s ." % self.url) != 0:
				return -1
		for fn in self.svn_repo_popen("svn list"):
			if self.svn_repo_clone_single(fn.strip()) != 0:
				return -1
		return 0

	def svn_repo_command(self, argv):
		if len(argv) < 1:
			pr_red_info("Please give a command")
			return -1
		command = " ".join(argv)
		for fn in self.svn_repo_popen("svn list"):
			fn = fn.strip()
			if fn.endswith("/"):
				command_last = "cd " + fn + " && " + command.replace("<path>", fn)
				if self.svn_repo_system(command_last) != 0:
					return -1
		return 0

if __name__ == "__main__":
	if len(argv) < 2:
		pr_red_info("Please give a subcmd")
		sys.exit(-1)

	repo = SvnRreoManager()
	subcmd = argv[1]
	argv = argv[2:]

	if subcmd in ["clone", "init"]:
		ret = repo.svn_repo_clone(argv)
	elif subcmd in ["update", "sync"]:
		ret = repo.svn_repo_update()
	elif subcmd in ["command", "cmd"]:
		ret = repo.svn_repo_command(argv)
	else:
		pr_red_info("unknown subcmd `%s'" % subcmd)
		ret = -1

	if ret < 0:
		pr_red_info("Failed")
	else:
		pr_green_info("OK")
