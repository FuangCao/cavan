#!/bin/sh

"""exec" python -E $0 $@
#"""

GIT_SVN_DEBUG = 1
FILE_LIST_NAME = "svn-file-list.txt"
FILE_DIFF_NAME = "svn-file-diff.txt"

import sys, os, time, re, traceback
from sys import argv
from xml.dom.minidom import parse, Document

def pr_red_info(message):
	print "\033[31m%s\033[0m" % message

def pr_green_info(message):
	print "\033[32m%s\033[0m" % message

def pr_debug_info(message):
	if GIT_SVN_DEBUG:
		print message

def pr_bold_info(message):
	print "\033[1m%s\033[0m" % message

class CavanGitSvn:
	def __init__(self, argv):
		self.argv = argv

	def system(self, command, prompt = True):
		if GIT_SVN_DEBUG and prompt:
			print command
		return os.system(command) == 0

	def sync(self):
		if not self.system("svn info") or not self.system("svn update"):
			return False

		if not os.path.exists(".git") and not self.system("git init"):
			return False

		if self.system("svn list -R | sed -e \"/.*\/\+$/d\" > %s" % FILE_LIST_NAME) == False:
			return False

		if self.system("git add -f %s" % FILE_LIST_NAME) == False:
			return False

		if self.system("git add -f $(cat %s)" % FILE_LIST_NAME) == False:
			fp = open(FILE_LIST_NAME, "r")
			if fp == None:
				return False

			lines = fp.readlines()
			fp.close()

			for line in lines:
				self.system("git add -f '%s'" % line.strip())

		self.system("git commit -asm \"sync from svn\"")

		return True

	def clone(self, url, pathname = None):
		if pathname == None:
			pathname = os.path.basename(url)
	
		if not os.path.isdir(path) and not self.system("rm %s -rfv && mkdir %s -pv" % (pathname, pathname)):
			return False

		os.chdir(pathname)

		if not os.path.exists(".svn") and not self.system("svn checkout %s ." % url):
			return False

		return self.sync()

	def main(self):
		argv = self.argv
		argc = len(argv)

		if argc < 2:
			pr_red_info("Please give a subcmd")
			return False

		subcmd = argv[1]

		if subcmd in ["clone", "init"]:
			if argc < 3:
				pr_red_info("Please give svn repo url")
				return False

			if argc < 4:
				return self.clone(argv[2])

			return self.clone(argv[2], argv[3])
		elif subcmd in ["update", "sync"]:
			return self.sync()
		else:
			pr_red_info("unknown subcmd `%s'" % subcmd)
			return False

if __name__ == "__main__":
	git_svn = CavanGitSvn(argv)
	if git_svn.main():
		pr_green_info("OK")
	else:
		pr_red_info("Failed")
