ROOT_PATH = $(shell pwd)
BUILD_PATH = $(ROOT_PATH)/build
PACKAGE_PATH = $(ROOT_PATH)/package
PATCH_PATH = $(ROOT_PATH)/patch
SCRIPT_PATH = $(BUILD_PATH)/script
DOWNLOAD_PATH = $(ROOT_PATH)/download

WORK_PATH = $(ROOT_PATH)/work
SRC_PATH = $(WORK_PATH)/src
UTILS_PATH = $(WORK_PATH)/utils
DECOMP_PATH = $(WORK_PATH)/decomp

WORK_ARCH = $(WORK_PATH)/$(CAVAN_TARGET_ARCH)
SYSROOT_PATH = $(WORK_ARCH)/sysroot
OUT_TOOLCHIAN = $(WORK_ARCH)/out
OUT_UTILS = $(WORK_PATH)/out
MARK_TOOLCHIAN = $(WORK_ARCH)/mark
MARK_UTILS = $(WORK_PATH)/mark

BUILD_CORE = $(BUILD_PATH)/core
BUILD_TOOLCHIAN = $(BUILD_PATH)/toolchian
BUILD_UTILS = $(BUILD_PATH)/utils

MARK_TOOLCHIAN_READY = $(MARK_TOOLCHIAN)/ready
MARK_UTILS_READY = $(MARK_UTILS)/ready

MAKEFILE_TOOLCHIAN = $(BUILD_TOOLCHIAN)/main.mk
MAKEFILE_UTILS = $(BUILD_UTILS)/main.mk
MAKEFILE_DEFINES = $(BUILD_CORE)/defines.mk
MAKEFILE_HOST_RULE = $(BUILD_UTILS)/rule.mk
MAKEFILE_TOOLCHIAN_RULE = $(BUILD_TOOLCHIAN)/rule.mk

PYTHON_PARSER = $(SCRIPT_PATH)/parser.py
XML_APPLICATION = $(SCRIPT_PATH)/application.xml

PATH := $(PATH):$(SYSROOT_PATH)/bin:$(SYSROOT_PATH)/bin:$(SYSROOT_PATH)/usr/bin:$(SYSROOT_PATH)/usr/sbin:$(SYSROOT_PATH)/usr/local/bin:$(SYSROOT_PATH)/usr/local/sbin
PATH := $(PATH):$(UTILS_PATH)/bin:$(UTILS_PATH)/bin:$(UTILS_PATH)/usr/bin:$(UTILS_PATH)/usr/sbin:$(UTILS_PATH)/usr/local/bin:$(UTILS_PATH)/usr/local/sbin

export ROOT_PATH PACKAGE_PATH BUILD_PATH PATCH_PATH SCRIPT_PATH WORK_ARCH
export SRC_PATH SYSROOT_PATH UTILS_PATH DECOMP_PATH PATH OUT_UTILS OUT_TOOLCHIAN DOWNLOAD_PATH
export BUILD_CORE BUILD_TOOLCHIAN BUILD_UTILS
export MARK_TOOLCHIAN MARK_UTILS MARK_TOOLCHIAN_READY MARK_TOOLCHIAN_READY
export MAKEFILE_DEFINES MAKEFILE_HOST_RULE MAKEFILE_TARGET_RULE MAKEFILE_TOOLCHIAN_RULE
export PYTHON_PARSER XML_APPLICATION

$(info ============================================================)
$(info CAVAN_BUILD_ARCH = $(CAVAN_BUILD_ARCH))
$(info CAVAN_BUILD_PLAT = $(CAVAN_BUILD_PLAT))
$(info CAVAN_TARGET_ARCH = $(CAVAN_TARGET_ARCH))
$(info CAVAN_TARGET_PLAT = $(CAVAN_TARGET_PLAT))
$(info CPU_BINUTILS_OPTION = $(CPU_BINUTILS_OPTION))
$(info CPU_GCC_OPTION = $(CPU_GCC_OPTION))
$(info KERNEL_VERSION = $(KERNEL_VERSION))
$(info BINUTILS_VERSION = $(BINUTILS_VERSION))
$(info GCC_VERSION = $(GCC_VERSION))
$(info GLIBC_VERSION = $(GLIBC_VERSION))
$(info PACKAGE_PATH = $(PACKAGE_PATH))
$(info PATCH_PATH = $(PATCH_PATH))
$(info ============================================================)

include $(MAKEFILE_DEFINES)

all: build_env $(MARK_TOOLCHIAN_READY)
	$(Q)echo OK

$(MARK_TOOLCHIAN_READY): $(MARK_UTILS_READY)
	$(Q)+make -f $(MAKEFILE_TOOLCHIAN)
	$(call generate_mark)

$(MARK_UTILS_READY):
	$(Q)+make -f $(MAKEFILE_UTILS)
	$(call generate_mark)

clean:
	$(Q)rm $(SRC_PATH) $(SYSROOT_PATH) $(UTILS_PATH) $(DECOMP_PATH) $(WORK_ARCH) $(OUT_UTILS) $(OUT_TOOLCHIAN) -rf

build_env:
	$(Q)mkdir $(SRC_PATH) $(SYSROOT_PATH) $(UTILS_PATH) $(OUT_UTILS) $(OUT_TOOLCHIAN) $(DECOMP_PATH) $(WORK_ARCH) $(DOWNLOAD_PATH) -pv
	$(Q)mkdir $(MARK_TOOLCHIAN) $(MARK_UTILS) -pv

.PHONY: build_env
